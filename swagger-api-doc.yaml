openapi: 3.0.3
info:
  title: Order Management System (OMS) - OpenAPI 3.0
  description: |-
    This is a Order Management System Server based on the OpenAPI 3.0 specification.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost:8080/api/v1/oms
tags:
  - name: Product
    description: Everything about products
  - name: Order
    description: Everything about orders
  - name: Payment
    description: Everything about payments
  - name: Health
    description: Health check

paths:
  /product:
    get:
      tags:
        - Product
      summary: Finds all products
      description: Find all products
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGetAll'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse500'
    put:
      tags:
        - Product
      summary: Update an existing product
      description: Update an existing Product by Id
      operationId: updateProduct
      requestBody:
        description: Update an existent product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse200'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse400'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse500'

    post:
      tags:
        - Product
      summary: Add a new Product
      description: Add a new Product
      operationId: addProduct
      requestBody:
        description: Create a new Product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse200'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse400'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse500'

  /product/{productName}:
    get:
      tags:
        - Product
      summary: Get a Products by name
      description: get  Products by name
      operationId: getProductbyname
      parameters:
        - name: productName
          in: path
          description: Product anem to get
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGetAll'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse400'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse500'

  /product/{productId}:
    delete:
      tags:
        - Product
      summary: Deletes a Product
      description: delete a Product
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse400'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse500'


  /payment:
    post:
      tags:
        - Payment
      summary: Add a payment
      description: Add a payment
      operationId: addpayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse200'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse400'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse500'



  /order:
    post:
      tags:
        - Order
      summary: add order
      description: add order.
      operationId: addorder
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderReq'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse200'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse400'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse500'

  /healthcheck:
    get:
      tags:
        - Health
      summary: health check endpoint
      description: health check endpoint
      operationId: health
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: 'version: 1.0.0'

        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse500'

components:
  schemas:

    Product:
      type: object
      properties:
        productId:
          type: integer
          format: int64
          example: 10
        productName:
          type: string
          example: Kraft
        productType:
          type: string
          example: Cheese
        productMeasureUnit:
          type: string
          example: Kg
        inStockQuantity:
          type: number
          format: double
        productSoldPrice:
          type: number
          format: double
        activeStatus:
          type: integer
          example: 1

    ProductGetAll:
      type: object
      properties:
        requestStatuses:
          type: array
          items:
            $ref: '#/components/schemas/ApiResponse200'
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        recordCount:
          type: number
          example: 20

    ProductRequest:
      type: object
      properties:
        productName:
          type: string
          example: Kraft
        productType:
          type: string
          example: Cheese
        productMeasureUnit:
          type: string
          example: Kg
        inStockQuantity:
          type: number
          format: double
        productSoldPrice:
          type: number
          format: double

    PaymentRequest:
      type: object
      properties:
        paymentStatus:
          type: string
          example: Kraft
        orderId:
          type: string
          example: Cheese
        userId:
          type: string
          example: Kg
        paymentAmount:
          type: number
          format: double

    order:
      type: object
      properties:
        orderStatus:
          enum:
            - PROCESSING
        orderTotalPrice:
          type: number
          format: int64
          example: 198772.33
        userId:
          type: integer
          format: int32
        invoiceId:
          type: integer
          format: int32

    payment:
      type: object
      properties:
        paymentStatus:
          enum:
            - PENDING
        paymentAmount:
          type: number
          format: int64
          example: 198772.33
        userId:
          type: integer
          format: int32

    delivery:
      type: object
      properties:
        deliveryStatus:
          enum:
            - PENDING
        deliveryDate:
          type: string
          format: date
          example: 2022-07-09
        userAddressId:
          type: integer
          format: int32

    orderItemsEle:
      type: object
      properties:
        quantity:
          type: integer
          format: int32
        productId:
          type: integer
          format: int32
        orderId:
          type: integer
          format: int32
        orderProductTotalPrice:
          type: integer
          format: int32


    OrderReq:
      type: object
      properties:
        payment:
          type: object
          $ref: '#/components/schemas/payment'
        delivery:
          type: object
          $ref: '#/components/schemas/delivery'
        order:
          type: object
          $ref: '#/components/schemas/order'
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/orderItemsEle'

    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag

    ApiResponse200:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          example: Success
        message:
          type: string
          example: Successfull

    ApiResponse400:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          example: Error
        message:
          type: string
          example: Bad Request

    ApiResponse500:
      type: object
      properties:
        code:
          type: integer
          format: int32
        status:
          type: string
          example: Error
        message:
          type: string
          example: Internal server error

